trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '8.x'
      artifactName: 'drop'

    steps:
# Use DotNet SDK as before
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: NodeTool@0
      displayName: 'Use Node.js 18.x' # Or 20.x - compatible with 'sass' package
      inputs:
        versionSpec: '18.x'
        checkLatest: true

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        command: 'install'
    # package.json is at root, so no workingDirectory needed here.

    - task: Gulp@1
      displayName: 'Run gulp tasks (including Sass compilation, JS/CSS minification)'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir) # Ensure this directory exists before this step

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Deploy'
  displayName: 'Deploy the web application'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: 'tailspin-space-game-web'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: test
    variables:
    - group: 'Release' # Assuming WebAppNameTest is in this group
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  variables: # Define stage-level variables, assuming they apply to all jobs in this stage
    - group: 'Release' # This will load all variables from the 'Release' variable group
    - name: jmeterVersion # Define JMeter version here, or globally if preferred
      value: '5.6.3' # Verify the latest stable JMeter version
  jobs:
  - deployment: Deploy # Deployment job for the Staging environment
    pool:
      vmImage: 'ubuntu-latest'
    environment: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

  - job: RunLoadTests # Load test job
    dependsOn: Deploy # Ensure this runs after the 'Deploy' job in the Staging stage
    displayName: 'Run load tests'
    pool:
      vmImage: '$(vmImageName)'
    # Variables are inherited from the stage, or you can add specific ones here if needed
    steps:
    - download: current # Download artifacts from the current pipeline run
      artifact: JMeterFiles # This will download LoadTest.jmx and JMeter2JUnit.xsl

    - script: |
        wget -c https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-$(jmeterVersion).tgz
        tar -xzf apache-jmeter-$(jmeterVersion).tgz
      displayName: 'Install Apache JMeter'

    - script: |
        # Use the downloaded JMX file
        apache-jmeter-$(jmeterVersion)/bin/./jmeter -n -t $(Pipeline.Workspace)/JMeterFiles/LoadTest.jmx -o Results.xml -Jhostname=$(STAGING_HOSTNAME)
      displayName: 'Run Load tests'

    - script: |
        sudo apt-get update
        sudo apt-get install -y xsltproc # -y to auto-confirm installation
        # Use the downloaded XSLT file. If JMeter2JUnit.xsl is always in JMeter's extras, use that path.
        xsltproc $(Pipeline.Workspace)/JMeterFiles/JMeter2JUnit.xsl Results.xml > JUnit.xml
        # OR alternative if it's always in JMeter's install:
        # xsltproc apache-jmeter-$(jmeterVersion)/extras/JMeter2JUnit.xsl Results.xml > JUnit.xml
      displayName: 'Transform JMeter output to JUnit'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: JUnit.xml